name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sunday

env:
  PYTHON_VERSION: '3.8'
  DJANGO_VERSION: '4.2'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} with Django ${{ matrix.django-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        django-version: ['3.2', '4.0', '4.1', '4.2']
        exclude:
          - python-version: '3.8'
            django-version: '4.2'
          - python-version: '3.11'
            django-version: '3.2'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install Django==${{ matrix.django-version }}
        python -m pip install pytest pytest-django pytest-cov coverage black flake8 mypy

    - name: Run black code formatting check
      run: |
        black --check django_hooks tests

    - name: Run flake8 code quality check
      run: |
        flake8 django_hooks tests

    - name: Run mypy type checking
      run: |
        mypy django_hooks

    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v --cov=django_hooks --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.10'

    - name: Install safety
      run: |
        pip install safety

    - name: Run safety check
      run: |
        safety check --full-report

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r django_hooks -f html -o bandit_report.html

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.10'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip build twine

    - name: Build package
      run: |
        python -m build

    - name: Verify package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    environment:
      name: pypi
      url: https://pypi.org/p/django-hooks

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}